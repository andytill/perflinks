{"name":"Perflinks","tagline":"Links to nuggets of erlang performance wisdom.","body":"# Erlang Performance Links\r\n\r\nNuggets of erlang performance wisdom, from those kind enough to share.\r\n\r\n## EProf\r\n\r\n[eprof](http://www.erlang.org/doc/man/eprof.html) attaches to a running process and and can produces a flat list of functions that are most called, and took the most time.\r\n\r\n + [Quick start](http://stackoverflow.com/a/4354188/1673868)\r\n\r\n## FProf\r\n\r\n[fprof](http://www.erlang.org/doc/man/fprof.html) attaches to a running process, like eprof but gives a hierarchical breakdown of function calls counts and their total time.  Useful when there are several calls throughout a process but it is not clear which one is taking the most time.\r\n\r\n + [Quick start](http://timanovsky.wordpress.com/2009/01/20/profiling-running-erlang-server/)\r\n + [erlgrind](https://github.com/isacssouza/erlgrind) converts fprof output into valgrind format that can be visualised using [KCacheGrind](http://kcachegrind.sourceforge.net/html/Home.html).\r\n\r\n## Beyond OTP\r\n\r\nLo√Øc Hoguin achieves LOLSPEED in cowboy by ditching OTP behaviours and rolling his own, OTP compliant processes in critical parts of the code.\r\n\r\n + [Slides](http://ninenines.eu/talks/beyond-otp/beyond-otp.html)\r\n + [Video presentation](http://youtu.be/fyobN-6YyJY)\r\n\r\n## Networking\r\n\r\n + [inet options](http://www.erlang.org/doc/man/inet.html#setopts-2)\r\n\r\n## Message Batching\r\n\r\n@ostinelli benchmarks message batching inside application code (as opposed to the TCP stack).\r\n\r\n + [Blog](http://www.ostinelli.net/boost-message-passing-between-erlang-nodes/)\r\n + [Code](https://github.com/davide/erlang_mq_boost)\r\n\r\nThis is still a WIP.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}